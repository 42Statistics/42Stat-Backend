# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type LinkableAccount {
  platform: String!
  id: String!
  email: String
  linkedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Account {
  userId: Int!
  linkedAccounts: [LinkableAccount!]!
}

type LoginSuccess {
  accessToken: String!
  refreshToken: String!
  userId: Int!
  message: String!
}

type ExpTable {
  level: Int!
  exp: Int!
}

type ProjectPreview {
  id: Int!
  name: String!
  url: String!
  circle: Int
  pdfUrl: String
  difficulty: Int
}

type Coalition {
  id: Int!
  name: String!
  slug: String! @deprecated(reason: "deprecated at v0.9.0")
  imageUrl: String! @deprecated(reason: "deprecated at v0.9.0, imgUrl 을 사용하세요.")
  imgUrl: String!
  coverUrl: String!
  color: String!
  score: Int! @deprecated(reason: "deprecated at v0.9.0")

  """코알리숑 마스터의 user id 입니다."""
  userId: Int! @deprecated(reason: "deprecated at v0.9.0")
}

type UserTitle {
  titleId: Int!
  name: String!
  selected: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserProfile {
  id: Int!
  login: String!
  imgUrl: String
  grade: String!
  displayname: String!
  coalition: Coalition
  titles: [UserTitle!]!
  level: Float!
}

type UserPreview {
  id: Int!
  login: String!
  imgUrl: String
}

type UserRank {
  userPreview: UserPreview!
  value: Float!
  rank: Int!
}

type UserRankingIndexPaginated {
  nodes: [UserRank!]!
  totalCount: Int!
  pageSize: Int!
  pageNumber: Int!
}

type CursorPageInfo {
  totalCount: Int!
  hasNextPage: Boolean!
  endCursor: String
}

type TeamPreview {
  id: Int!
  name: String!
  url: String!
}

type Flag {
  id: Int!
  name: String!
  isPositive: Boolean!
}

type EvalLogHeader {
  corrector: UserPreview!
  teamPreview: TeamPreview!
  beginAt: DateTime!
  projectPreview: ProjectPreview!
  flag: Flag!
}

type EvalReview {
  mark: Int!
  review: String!
}

type EvalLog {
  id: Int!
  header: EvalLogHeader!
  correctorReview: EvalReview!
  correctedsReview: EvalReview
}

type EvalLogEdge {
  cursor: String!
  node: EvalLog!
}

type EvalLogsPaginated {
  edges: [EvalLogEdge!]!
  pageInfo: CursorPageInfo!
}

type IntRecord {
  at: DateTime!
  value: Int!
}

type IntPerCoalition {
  coalition: Coalition!
  value: Int!
}

type IntPerCoalitionDateRanged {
  data: [IntPerCoalition!]!
  start: DateTime!
  end: DateTime!
}

type ScoreRecordPerCoalition {
  coalition: Coalition!
  records: [IntRecord!]!
}

type HomeCoalition {
  totalScoresPerCoalition: [IntPerCoalition!]!
  scoreRecordsPerCoalition(last: Int! = 12): [ScoreRecordPerCoalition!]!
  tigCountPerCoalitionByDateTemplate(dateTemplate: DateTemplate!): IntPerCoalitionDateRanged!
  winCountPerCoalition: [IntPerCoalition!]!
}

enum DateTemplate {
  CURR_WEEK
  LAST_WEEK
  CURR_MONTH
  LAST_MONTH
  TOTAL
}

type HomeEval {
  totalEvalCount: Int!
  evalCountRecords(last: Int!): [IntRecord!]!
  averageFeedbackLength: Int!
  averageCommentLength: Int!
}

type Pair {
  key: String!
  value: Int!
}

type Rate {
  total: Int!
  fields: [Pair!]!
}

type ProjectRank {
  projectPreview: ProjectPreview!
  value: Int!
  rank: Int!
}

type ResultPerRank {
  rank: Int!
  rate: Rate!
}

type ExamResult {
  resultPerRank: [ResultPerRank!]!
  beginAt: DateTime!
  endAt: DateTime!
  location: String!
  maxPeople: Int!
  name: String!
  nbrSubscribers: Int!
}

type ExamResultDateRanged {
  data: ExamResult!
  start: DateTime!
  end: DateTime!
}

type HomeTeam {
  teamCloseRecords(
    """1 ~ 730 일"""
    last: Int!
  ): [IntRecord!]!
  currRegisteredCountRanking(limit: Int! = 3): [ProjectRank!]!
  recentExamResult(skip: Int! = 0): ExamResultDateRanged!
}

type IntPerCircle {
  circle: Int!
  value: Int!
}

type UserCountPerLevel {
  value: Int!
  level: Int!
}

type HomeUser {
  monthlyAliveUserCountRecordsFromStart(first: Int!): [IntRecord!]!
  monthlyAliveUserCountRecordsFromEnd(last: Int!): [IntRecord!]!
  monthlyAliveUserCountRecordsByDate(firstOrLast: Int!, timestamp: Int!): [IntRecord!]!
  monthlyActiveUserCountRecordsFromEnd(last: Int!): [IntRecord!]!
  aliveUserCountRecords: [IntRecord!]! @deprecated(reason: "v0.10.0")
  userCountPerLevel: [UserCountPerLevel!]!
  userRate: Rate!
  memberRate: Rate!
  blackholedRate: Rate!

  """1 ~ 120 개월"""
  blackholedCountRecords(last: Int!): [IntRecord!]!
  blackholedCountPerCircle: [IntPerCircle!]!
  walletRanking(limit: Int! = 5): [UserRank!]!
  correctionPointRanking(limit: Int! = 5): [UserRank!]!
  averageDurationPerCircle: [IntPerCircle!]!
}

"""누적 데이터 기준입니다."""
type Landing {
  daysAfterBeginAt: Int!
  aliveCount: Int!
  blackholedCount: Int!
  memberCount: Int!
  evalCount: Int!
  trendingProject: ProjectRank!
}

type LeaderboardElement {
  """내 랭킹 정보"""
  me: UserRank

  """전체 랭킹 정보"""
  totalRanking: UserRankingIndexPaginated!
}

type LeaderboardElementDateRanged {
  data: LeaderboardElement!
  start: DateTime!
  end: DateTime!
}

type LeaderboardComment {
  """TOTAL, CURR_MONTH, CURR_WEEK 만 가능합니다"""
  byDateTemplate(pageSize: Int! = 10, pageNumber: Int! = 1, promo: Int, coalitionId: Int, dateTemplate: DateTemplate!): LeaderboardElementDateRanged!
}

type LeaderboardEval {
  """TOTAL, CURR_MONTH, CURR_WEEK 만 가능합니다"""
  byDateTemplate(pageSize: Int! = 10, pageNumber: Int! = 1, promo: Int, coalitionId: Int, dateTemplate: DateTemplate!): LeaderboardElementDateRanged!
}

type LeaderboardExp {
  """CURR_MONTH, CURR_WEEK 만 가능합니다"""
  byDateTemplate(pageSize: Int! = 10, pageNumber: Int! = 1, promo: Int, coalitionId: Int, dateTemplate: DateTemplate!): LeaderboardElementDateRanged!
}

type LeaderboardLevel {
  """TOTAL 만 가능합니다"""
  byDateTemplate(pageSize: Int! = 10, pageNumber: Int! = 1, promo: Int, coalitionId: Int, dateTemplate: DateTemplate!): LeaderboardElementDateRanged!
}

type Promo {
  promo: Int!
  beginAt: DateTime!
  userCount: Int!
}

type LeaderboardMetadata {
  promoList: [Promo!]!
  coalitionList: [Coalition!]!
}

type LeaderboardScore {
  """TOTAL, CURR_WEEK, CURR_MONTH 만 가능합니다"""
  byDateTemplate(pageSize: Int! = 10, pageNumber: Int! = 1, promo: Int, coalitionId: Int, dateTemplate: DateTemplate!): LeaderboardElementDateRanged!
}

type CharacterType {
  name: String!
  description: String!
  color: String!
}

type Character {
  name: String!
  types: [CharacterType!]!
  imgUrl: String!
}

type DailyActivity {
  date: DateTime!
  records: [DailyActivityRecord!]!
}

union DailyActivityRecord = DailyLogtimeRecord | DailyDefaultRecord

type DailyLogtimeRecord {
  type: DailyActivityType!
  value: Int!
}

enum DailyActivityType {
  CORRECTOR
  CORRECTED
  EVENT
  LOGTIME
}

type DailyDefaultRecord {
  type: DailyActivityType!
  id: Int!
  at: DateTime!
}

type UserTeam {
  id: Int!
  name: String!
  occurrence: Int!
  projectPreview: ProjectPreview!
  status: TeamStatus!
  lastEventTime: DateTime!
  isValidated: Boolean
  finalMark: Int
}

enum TeamStatus {
  REGISTERED
  IN_PROGRESS
  WAITING_FOR_CORRECTION
  FINISHED
}

type PreferredTime {
  total: Int!

  """06 ~ 12"""
  morning: Int!

  """12 ~ 18"""
  daytime: Int!

  """18 ~ 24"""
  evening: Int!

  """24 ~ 06"""
  night: Int!
}

type PreferredTimeDateRanged {
  data: PreferredTime!
  start: DateTime!
  end: DateTime!
}

type PreferredCluster {
  name: String
}

type PreferredClusterDateRanged {
  data: PreferredCluster!
  start: DateTime!
  end: DateTime!
}

type UserTeamInfo {
  lastRegistered: UserTeam
  lastPassed: UserTeam
  teams: [UserTeam!]!
}

type LevelRecord {
  monthsPassed: Int!
  level: Float!
}

type UserScoreInfo {
  value: Int!
  rankInCoalition: Int
  rankInTotal: Int! @deprecated(reason: "deprecated at v0.9.0")
}

type PersonalGeneral {
  userProfile: UserProfile!
  beginAt: DateTime!
  blackholedAt: DateTime
  wallet: Int!
  scoreInfo: UserScoreInfo!
  logtimeRecords(last: Int!): [IntRecord!]!
  preferredTimeByDateTemplate(dateTemplate: DateTemplate!): PreferredTimeDateRanged!
  preferredClusterByDateTemplate(dateTemplate: DateTemplate!): PreferredClusterDateRanged!
  teamInfo: UserTeamInfo!
  userLevelRecords: [LevelRecord!]!
  promoLevelRecords: [LevelRecord!]!
  promoMemberLevelRecords: [LevelRecord!]!
  character: Character
  dailyActivities(year: Int): [DailyActivity!]!
  dailyActivityDetailRecords(args: [DailyActivityDetailRecordIdWithType!]!): [DailyActivityDetailRecord!]!
}

union DailyActivityDetailRecord = DailyEventDetailRecord | DailyEvaluationDetailRecord

type DailyEventDetailRecord {
  type: DailyActivityType!
  id: Int!
  name: String!
  location: String!
  beginAt: DateTime!
  endAt: DateTime!
}

type DailyEvaluationDetailRecord {
  type: DailyActivityType!
  id: Int!
  correctorLogin: String!
  teamId: Int!
  leaderLogin: String!
  projectName: String!
  beginAt: DateTime!
  filledAt: DateTime!
}

input DailyActivityDetailRecordIdWithType {
  """CORRECTOR, CORRECTED, EVENT 만 가능합니다"""
  type: DailyActivityType!
  id: Int!
}

type MyRecentActivity {
  isNewMember: Boolean!
  lastValidatedTeam: UserTeam
  blackholedAt: DateTime
  experienceRank: Int
  scoreRank: Int
  evalCountRank: Int
}

type MyInfo {
  userPreview: UserPreview!
  displayname: String!
  level: Float
  beginAt: DateTime
  myRecentActivity: MyRecentActivity
  isNewMember: Boolean! @deprecated(reason: "deprecated at v0.9.0, myRecentActivity 를 사용하세요")
  lastValidatedTeam: UserTeam @deprecated(reason: "deprecated at v0.9.0, myRecentActivity 를 사용하세요")
  blackholedAt: DateTime @deprecated(reason: "deprecated at v0.9.0, myRecentActivity 를 사용하세요")
  experienceRank: Int @deprecated(reason: "deprecated at v0.9.0, myRecentActivity 를 사용하세요")
  scoreRank: Int @deprecated(reason: "deprecated at v0.9.0, myRecentActivity 를 사용하세요")
  evalCountRank: Int @deprecated(reason: "deprecated at v0.9.0, myRecentActivity 를 사용하세요")
}

type PersonalEval {
  userProfile: UserProfile!
  correctionPoint: Int!
  totalCount: Int!
  countRecords(
    """1 ~ 120 개월"""
    last: Int!
  ): [IntRecord!]!
  totalDuration: Int!
  averageDuration: Int!
  averageFinalMark: Float!
  averageFeedbackLength: Int!
  averageCommentLength: Int!
  destinyRanking(limit: Int! = 5): [UserRank!]!
  recentComment: String
}

type UserRankWithTotal {
  userPreview: UserPreview!
  value: Float!
  rank: Int!
  totalUserCount: Int!
}

type PersonalVersus {
  levelRankWithTotal: UserRankWithTotal!
  totalScoreRankWithTotal: UserRankWithTotal!
  totalEvalCountRankWithTotal: UserRankWithTotal!
  currMonthExpIncreamentRankWithTotal: UserRankWithTotal!
  currMonthScoreRankWithTotal: UserRankWithTotal!
  currMonthEvalCountRankWithTotal: UserRankWithTotal!
  totalLogtime: Int!
}

type ProjectInfo {
  id: Int!
  name: String!
  url: String!
  circle: Int
  pdfUrl: String
  objectives: [String!]!
  skills: [String!]!
  description: String!
  minUserCount: Int!
  maxUserCount: Int!
  estimateTime: String
  difficulty: Int
  currRegisteredTeamCount: Int!

  """총 제출 횟수 입니다."""
  closedTeamCount: Int!
  averagePassFinalMark: Int!
  validatedRate: Rate!
}

type Setting {
  account: Account!
}

type Spotlight {
  userPreviews: [UserPreview!]!
  projectPreviews: [ProjectPreview!]!
}

type TeamUpload {
  id: Int!
  finalMark: Int!
  comment: String!
  createdAt: DateTime!
}

type TeamEvalLogHeader {
  corrector: UserPreview!
  beginAt: DateTime!
  flag: Flag!
}

type TeamEvalLog {
  id: Int!
  correctorReview: EvalReview!
  correctedsReview: EvalReview
  header: TeamEvalLogHeader!
}

type TeamUserPreview {
  id: Int!
  login: String!
  imgUrl: String
  occurrence: Int!
  isLeader: Boolean!
}

type TeamInfo {
  id: Int!
  name: String!
  url: String!
  users: [TeamUserPreview!]!
  finalMark: Int

  """기계 채점 결과"""
  moulinette: TeamUpload
  status: TeamStatus!
  lastEventTime: DateTime!
  createdAt: DateTime!
  lockedAt: DateTime
  closedAt: DateTime
  projectPreview: ProjectPreview!
  evalLogs: [TeamEvalLog!]!
}

type Query {
  getLanding: Landing!
  getMyInfo: MyInfo
  getSpotlight(input: String!, limit: Int! = 10): Spotlight!
  getHomeUser: HomeUser!
  getHomeEval: HomeEval!
  getHomeCoalition: HomeCoalition!
  getHomeTeam: HomeTeam!
  getPersonalGeneral(login: String, userId: Int): PersonalGeneral!
  getPersonalEval(userId: Int, login: String): PersonalEval!
  getPersonalVersus(login: String, userId: Int): PersonalVersus
  getProjectInfo(projectName: String! = "Libft"): ProjectInfo!
  getTeamInfo(id: Int!): TeamInfo!
  getLeaderboardMetadata: LeaderboardMetadata!
  getLeaderboardLevel: LeaderboardLevel!
  getLeaderboardExpIncrement: LeaderboardExp!
  getLeaderboardEvalCount: LeaderboardEval!
  getLeaderboardScore: LeaderboardScore!
  getLeaderboardComment: LeaderboardComment!
  getEvalLogs(after: String, first: Int! = 20, corrector: String, corrected: String, projectName: String, outstandingOnly: Boolean! = false, imperfectOnly: Boolean! = false, sortOrder: EvalLogSortOrder! = BEGIN_AT_DESC): EvalLogsPaginated!
  getSetting: Setting!
  getExpTable: [ExpTable!]!
}

enum EvalLogSortOrder {
  BEGIN_AT_ASC
  BEGIN_AT_DESC
}

type Mutation {
  ftLogin(ftCode: String!): LoginSuccess!
  googleLogin(google: GoogleLoginInput!, ftCode: String): LoginResult!
  linkGoogle(google: GoogleLoginInput!): Account!
  unlinkAccount(targetPlatform: String!): Account!
  refreshToken(refreshToken: String!): LoginSuccess!
  logout: Int!
  deleteAccount: Int!
}

union LoginResult = LoginSuccess | LoginNotLinked

type LoginNotLinked {
  message: String!
}

input GoogleLoginInput {
  clientId: String!
  credential: String!
}